@page "/usersettings"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using PoMad.Data
@using PoMad.Services
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h1>User Settings</h1>

@if (user != null)
{
    <EditForm Model="user" OnValidSubmit="SaveUserSettings">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="idealWeight">Ideal Weight (lbs):</label>
            <InputNumber id="idealWeight" class="form-control" @bind-Value="user.IdealWeight" />
        </div>
        <div class="form-group">
            <label for="height">Height (inches):</label>
            <InputNumber id="height" class="form-control" @bind-Value="user.Height" />
        </div>
        <div class="form-group">
            <label for="age">Age:</label>
            <InputNumber id="age" class="form-control" @bind-Value="user.Age" />
        </div>
        <div class="form-group">
            <label for="birthday">Birthday:</label>
            <InputDate id="birthday" class="form-control" @bind-Value="user.Birthday" />
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    private ApplicationUser user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = await UserManager.GetUserAsync(authState.User);
        if (user.Birthday == DateTime.MinValue)
        {
            user.Birthday = new DateTime(1975, 1, 1);
        }
        // Assuming user is not null, otherwise handle null case
    }

    private async Task SaveUserSettings()
    {
        var result = await UserManager.UpdateAsync(user);
        if (!result.Succeeded)
        {
            // Handle errors, e.g., show an error message
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }
}